{"ast":null,"code":"var _jsxFileName = \"/Users/aishasabrina/Desktop/MobileAppFall24/Week05/todo-v2/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\n// import todocreate after handler\nimport TodoCreate from './components/TodoCreate';\nimport TodoList from './components/TodoList';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // all children components need access to this list or part of it.\n  // app is the closest common parent to them all!\n  const [todos, setTodos] = useState([]);\n\n  // event handler to pass to TodoCreate\n  // need to take the title from TodoCreate\n  const createTodo = async title => {\n    const response = await axios.post('http://localhost:3001/todos', {\n      title\n    });\n    console.log(response);\n\n    // // AFTER createtodo is finished, update state here!\n    // // thisb is our first time updating an array, slightly more complex!\n    // /*NEVER EVER\n    // todos.push({id: 1, title: title})\n    //  setTodos(todos) */\n    // // when array or object needs updating in state,\n    // // we need to be very careful to do it the react way\n    // // create a new array,\n    // // copy all existing elements in that array\n    // // add in new item at the end!\n    // const updatedTodos = [\n    //   ...todos,\n    //   // key and value match for title, so we can condense it like this\n    //   //{id: 123, title: title}\n    //   // NEW: Unique IDS\n    //   // math.random, with math.round\n    //   {id: Math.round(Math.random() * 9999999), title},\n    // ]\n    // setTodos(updatedTodos)\n  };\n  const deleteTodoById = id => {\n    // go tthrough array, find the one with the matching ID and delete it!\n    // array.filter does not mutate the array, it returns an updated one that only contains the\n    // elements that passed our truthy test!\n    // const updatedTodos = todos.filter(() => {})\n\n    const updatedTodos = todos.filter(todo => {\n      // return truthy keeps, falsey removes!\n      return todo.id !== id;\n    });\n    setTodos(updatedTodos);\n  };\n\n  // LAST EDIT need the ID of the todo being edited AND the new title from the form!\n  const editTodoById = (id, newTitle) => {\n    const updatedTodos = todos.map(todo => {\n      // we only care about updating the one that matches the ID\n      if (todo.id === id) {\n        // we copy the old values, then overwrite the title\n        return {\n          ...todo,\n          title: newTitle\n        };\n      }\n      // otherwise return the unaltered todo\n      return todo;\n    });\n    // set our state, NOW WE NEED TO PASS IT ALL THE WAY DOWN\n    setTodos(updatedTodos);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(TodoCreate, {\n      onCreate: createTodo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TodoList, {\n      todos: todos,\n      onDelete: deleteTodoById,\n      onEdit: editTodoById\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"ZATHeV9x55jFrDOww2hwcxQ3V1U=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","TodoCreate","TodoList","axios","jsxDEV","_jsxDEV","App","_s","todos","setTodos","createTodo","title","response","post","console","log","deleteTodoById","id","updatedTodos","filter","todo","editTodoById","newTitle","map","children","onCreate","fileName","_jsxFileName","lineNumber","columnNumber","onDelete","onEdit","_c","$RefreshReg$"],"sources":["/Users/aishasabrina/Desktop/MobileAppFall24/Week05/todo-v2/src/App.js"],"sourcesContent":["import {useState} from 'react'\n// import todocreate after handler\nimport TodoCreate from './components/TodoCreate'\nimport TodoList from './components/TodoList'\nimport axios from 'axios'\n\nconst App = () => {\n  // all children components need access to this list or part of it.\n  // app is the closest common parent to them all!\n  const [todos, setTodos] = useState([])\n\n  // event handler to pass to TodoCreate\n  // need to take the title from TodoCreate\n  const createTodo = async(title) => {\n    const response = await axios.post('http://localhost:3001/todos', {title})\n    console.log(response)\n    \n    // // AFTER createtodo is finished, update state here!\n    // // thisb is our first time updating an array, slightly more complex!\n    // /*NEVER EVER\n    // todos.push({id: 1, title: title})\n    //  setTodos(todos) */\n    // // when array or object needs updating in state,\n    // // we need to be very careful to do it the react way\n    // // create a new array,\n    // // copy all existing elements in that array\n    // // add in new item at the end!\n    // const updatedTodos = [\n    //   ...todos,\n    //   // key and value match for title, so we can condense it like this\n    //   //{id: 123, title: title}\n    //   // NEW: Unique IDS\n    //   // math.random, with math.round\n    //   {id: Math.round(Math.random() * 9999999), title},\n    // ]\n    // setTodos(updatedTodos)\n  }\n\n  const deleteTodoById = (id) => {\n    // go tthrough array, find the one with the matching ID and delete it!\n    // array.filter does not mutate the array, it returns an updated one that only contains the\n    // elements that passed our truthy test!\n    // const updatedTodos = todos.filter(() => {})\n\n    const updatedTodos = todos.filter((todo) => {\n      // return truthy keeps, falsey removes!\n      return todo.id !== id\n    })\n\n    setTodos(updatedTodos)\n  }\n\n  // LAST EDIT need the ID of the todo being edited AND the new title from the form!\n  const editTodoById = (id, newTitle) => {\n    const updatedTodos = todos.map((todo) => {\n      // we only care about updating the one that matches the ID\n      if (todo.id === id) {\n        // we copy the old values, then overwrite the title\n        return {...todo, title: newTitle}\n      }\n      // otherwise return the unaltered todo\n      return todo\n    })\n    // set our state, NOW WE NEED TO PASS IT ALL THE WAY DOWN\n    setTodos(updatedTodos)\n  }\n  return (\n    <div>\n      <TodoCreate onCreate={createTodo} />\n      {/* Now that we have state, pass it to the list to map! */}\n      {/* DELETE function added, pass it down */}\n      <TodoList todos={todos} onDelete={deleteTodoById} onEdit={editTodoById} />\n    </div>\n  )\n}\n\nexport default App\n"],"mappings":";;AAAA,SAAQA,QAAQ,QAAO,OAAO;AAC9B;AACA,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,KAAK,MAAM,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB;EACA;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;;EAEtC;EACA;EACA,MAAMU,UAAU,GAAG,MAAMC,KAAK,IAAK;IACjC,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,IAAI,CAAC,6BAA6B,EAAE;MAACF;IAAK,CAAC,CAAC;IACzEG,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;;IAErB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACF,CAAC;EAED,MAAMI,cAAc,GAAIC,EAAE,IAAK;IAC7B;IACA;IACA;IACA;;IAEA,MAAMC,YAAY,GAAGV,KAAK,CAACW,MAAM,CAAEC,IAAI,IAAK;MAC1C;MACA,OAAOA,IAAI,CAACH,EAAE,KAAKA,EAAE;IACvB,CAAC,CAAC;IAEFR,QAAQ,CAACS,YAAY,CAAC;EACxB,CAAC;;EAED;EACA,MAAMG,YAAY,GAAGA,CAACJ,EAAE,EAAEK,QAAQ,KAAK;IACrC,MAAMJ,YAAY,GAAGV,KAAK,CAACe,GAAG,CAAEH,IAAI,IAAK;MACvC;MACA,IAAIA,IAAI,CAACH,EAAE,KAAKA,EAAE,EAAE;QAClB;QACA,OAAO;UAAC,GAAGG,IAAI;UAAET,KAAK,EAAEW;QAAQ,CAAC;MACnC;MACA;MACA,OAAOF,IAAI;IACb,CAAC,CAAC;IACF;IACAX,QAAQ,CAACS,YAAY,CAAC;EACxB,CAAC;EACD,oBACEb,OAAA;IAAAmB,QAAA,gBACEnB,OAAA,CAACJ,UAAU;MAACwB,QAAQ,EAAEf;IAAW;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAGpCxB,OAAA,CAACH,QAAQ;MAACM,KAAK,EAAEA,KAAM;MAACsB,QAAQ,EAAEd,cAAe;MAACe,MAAM,EAAEV;IAAa;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvE,CAAC;AAEV,CAAC;AAAAtB,EAAA,CApEKD,GAAG;AAAA0B,EAAA,GAAH1B,GAAG;AAsET,eAAeA,GAAG;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}