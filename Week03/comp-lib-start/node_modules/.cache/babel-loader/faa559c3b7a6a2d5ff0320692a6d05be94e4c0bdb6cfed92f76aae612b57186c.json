{"ast":null,"code":"var _jsxFileName = \"/Users/aishasabrina/Desktop/MobileAppFall24/Week03/comp-lib-start/src/components/Accordion.js\",\n  _s = $RefreshSig$();\n// writing in React - can change to jsx to indicate it's a component\n// props and state - all it did was apply style in the past\n// content as data coming in as a prop\n// need a click action\n// where does data live and where does state live?\n\nimport { useState } from 'react';\nimport { GoGhevronDown, GoGhevronLeft } from 'react-icons/go';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Accordion(props) {\n  _s();\n  // keep track of expandedIndex in state (values that can change over time) - this component is gonna re-render based on user interaction\n  // const [name, function_to_update/set_state] \n  // set default to 0 - this is the starting state\n  const [expandedIndex, setExpandedIndex] = useState(-1); // all will start as closed because -1 not in any of the indices\n\n  // content isn't part of the Accordion bc we want it to be reusable for different info\n  const {\n    items\n  } = props;\n  const renderedItems = items.map((item, index) => {\n    const isExpanded = index === expandedIndex;\n    const icon = /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"text-2xl\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 22\n    }, this);\n    const handleClick = nextIndex => {\n      // expandedIndex = index // NEVER DO THIS!! must use setter bcs things re-render - we use a setter because it still references the same one - e.g. expandedIndex = 1, comparing to setExpandedIndex(1) - so nothing changed - react x re-render - so must keep single source of truth - SETEXPANDEDINDEX!! it shouldn't compare itself to itself, else never changes/re-renders\n      // console.log(index)\n      // setExpandedIndex(index)\n      // whatever is the previous = currentExpandedIndex\n      // we get current and next for free\n      // setExpandedIndex(nextIndex) // can't close it if u click on itself again\n      setExpandedIndex(currentExpandedIndex => {\n        // if the item is already open, close it\n        // else open it\n        if (currentExpandedIndex === nextIndex) {\n          return -1; // sets expandedIndex to be -1\n        } else {\n          return nextIndex;\n        }\n      });\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => handleClick(index),\n        className: \"flex justify-between p-3 bg-gray-100 border-b items-center cursor-pointer\",\n        children: item.label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), isExpanded && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"border-b p-5\",\n        children: item.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 33\n      }, this)]\n    }, item.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: renderedItems\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 12\n  }, this);\n}\n_s(Accordion, \"VGgwYDkzE0V3NPfFAbSlb4lQBfI=\");\n_c = Accordion;\nvar _c;\n$RefreshReg$(_c, \"Accordion\");","map":{"version":3,"names":["useState","GoGhevronDown","GoGhevronLeft","jsxDEV","_jsxDEV","Accordion","props","_s","expandedIndex","setExpandedIndex","items","renderedItems","map","item","index","isExpanded","icon","className","fileName","_jsxFileName","lineNumber","columnNumber","handleClick","nextIndex","currentExpandedIndex","children","onClick","label","content","id","_c","$RefreshReg$"],"sources":["/Users/aishasabrina/Desktop/MobileAppFall24/Week03/comp-lib-start/src/components/Accordion.js"],"sourcesContent":["// writing in React - can change to jsx to indicate it's a component\n// props and state - all it did was apply style in the past\n// content as data coming in as a prop\n// need a click action\n// where does data live and where does state live?\n\nimport {useState} from 'react'\nimport {GoGhevronDown, GoGhevronLeft} from 'react-icons/go'\n\nexport default function Accordion(props) {\n    // keep track of expandedIndex in state (values that can change over time) - this component is gonna re-render based on user interaction\n    // const [name, function_to_update/set_state] \n    // set default to 0 - this is the starting state\n    const [expandedIndex, setExpandedIndex] = useState(-1) // all will start as closed because -1 not in any of the indices\n\n    // content isn't part of the Accordion bc we want it to be reusable for different info\n    const {items} = props\n\n    const renderedItems = items.map((item, index) => { \n        const isExpanded = index === expandedIndex\n        const icon = <span className=\"text-2xl\"></span>\n        const handleClick = (nextIndex) => {\n            // expandedIndex = index // NEVER DO THIS!! must use setter bcs things re-render - we use a setter because it still references the same one - e.g. expandedIndex = 1, comparing to setExpandedIndex(1) - so nothing changed - react x re-render - so must keep single source of truth - SETEXPANDEDINDEX!! it shouldn't compare itself to itself, else never changes/re-renders\n            // console.log(index)\n            // setExpandedIndex(index)\n            // whatever is the previous = currentExpandedIndex\n            // we get current and next for free\n            // setExpandedIndex(nextIndex) // can't close it if u click on itself again\n            setExpandedIndex((currentExpandedIndex) => {\n                // if the item is already open, close it\n                // else open it\n                if (currentExpandedIndex === nextIndex) {\n                    return -1 // sets expandedIndex to be -1\n                } else {\n                    return nextIndex\n                }\n            })\n        }\n        return (\n            <div key={item.id}>\n                {/* using tailwind css */}\n                {/* add an onClick to label since that's where we want to click on to open accordion */}\n                {/* setExpandedIndex(index) - REFERENCE TO A FUNCTION - NOT CALLING THE FUNCTION - parantheses only to pass parameter, so () => setExpandedIndex(index) would work instead of handleClick, but we use handleClick so that it's cleaner */}\n                <div onClick={() => handleClick(index)} className=\"flex justify-between p-3 bg-gray-100 border-b items-center cursor-pointer\">{item.label}</div>\n\n                {/* only show content one at a time - if 1 opens, another closes - set which one to be expanded index */}\n                {/* so we keep track of state HERE in Accordion.js */}\n                {/* If the content index matches the expandedIndex in state, render it. Otherwise, render nothing. */}\n                {/* look at CONDITIONAL RENDERING on notes */}\n                {/* returns the LAST truthy (existing) value - what's rendered is the LAST truthy value, if isExpanded true, then the latter renders */}\n                {/* if isExpanded false, then nothing renders */}\n                { isExpanded && <div className=\"border-b p-5\">{item.content}</div> }\n            </div>\n        )\n    })\n\n    return <div>{renderedItems}</div>\n}"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,QAAQ,QAAO,OAAO;AAC9B,SAAQC,aAAa,EAAEC,aAAa,QAAO,gBAAgB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE3D,eAAe,SAASC,SAASA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACrC;EACA;EACA;EACA,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAC;;EAEvD;EACA,MAAM;IAACU;EAAK,CAAC,GAAGJ,KAAK;EAErB,MAAMK,aAAa,GAAGD,KAAK,CAACE,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;IAC7C,MAAMC,UAAU,GAAGD,KAAK,KAAKN,aAAa;IAC1C,MAAMQ,IAAI,gBAAGZ,OAAA;MAAMa,SAAS,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC;IAC/C,MAAMC,WAAW,GAAIC,SAAS,IAAK;MAC/B;MACA;MACA;MACA;MACA;MACA;MACAd,gBAAgB,CAAEe,oBAAoB,IAAK;QACvC;QACA;QACA,IAAIA,oBAAoB,KAAKD,SAAS,EAAE;UACpC,OAAO,CAAC,CAAC,EAAC;QACd,CAAC,MAAM;UACH,OAAOA,SAAS;QACpB;MACJ,CAAC,CAAC;IACN,CAAC;IACD,oBACInB,OAAA;MAAAqB,QAAA,gBAIIrB,OAAA;QAAKsB,OAAO,EAAEA,CAAA,KAAMJ,WAAW,CAACR,KAAK,CAAE;QAACG,SAAS,EAAC,2EAA2E;QAAAQ,QAAA,EAAEZ,IAAI,CAACc;MAAK;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,EAQ9IN,UAAU,iBAAIX,OAAA;QAAKa,SAAS,EAAC,cAAc;QAAAQ,QAAA,EAAEZ,IAAI,CAACe;MAAO;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA,GAZ5DR,IAAI,CAACgB,EAAE;MAAAX,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAaZ,CAAC;EAEd,CAAC,CAAC;EAEF,oBAAOjB,OAAA;IAAAqB,QAAA,EAAMd;EAAa;IAAAO,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AACrC;AAACd,EAAA,CAhDuBF,SAAS;AAAAyB,EAAA,GAATzB,SAAS;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}