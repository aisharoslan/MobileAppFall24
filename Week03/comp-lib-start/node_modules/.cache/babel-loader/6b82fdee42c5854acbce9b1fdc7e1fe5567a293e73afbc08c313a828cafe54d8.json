{"ast":null,"code":"var _jsxFileName = \"/Users/aishasabrina/Desktop/MobileAppFall24/Week03/comp-lib-start/src/components/Accordion.js\",\n  _s = $RefreshSig$();\n// writing in React - can change to jsx to indicate it's a component\n// props and state - all it did was apply style in the past\n// content as data coming in as a prop\n// need a click action\n// where does data live and where does state live?\n\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Accordion(props) {\n  _s();\n  // keep track of expandedIndex in state (values that can change over time) - this component is gonna re-render based on user interaction\n  // const [name, function_to_update/set_state] \n  // set default to 0 - this is the starting state\n  const [expandedIndex, setExpandedIndex] = useState(0);\n\n  // content isn't part of the Accordion bc we want it to be reusable for different info\n  const {\n    items\n  } = props;\n  const renderedItems = items.map((item, index) => {\n    const isExpanded = index === expandedIndex;\n    const handleClick = index => {\n      // expandedIndex = index // NEVER DO THIS!! must use setter bcs things re-render - we use a setter because it still references the same one - e.g. expandedIndex = 1, comparing to setExpandedIndex(1) - so nothing changed - react x re-render - so must keep single source of truth - SETEXPANDEDINDEX!! it shouldn't compare itself to itself, else never changes/re-renders\n      setExpandedIndex(index);\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: handleClick(index),\n        className: \"flex justify-between p-3 bg-gray-100 border-b items-center cursor-pointer\",\n        children: item.label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this), isExpanded && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: item.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 33\n      }, this)]\n    }, item.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: renderedItems\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 12\n  }, this);\n}\n_s(Accordion, \"tfuXMw44hKdBvvksp2O0ecqrG7g=\");\n_c = Accordion;\nvar _c;\n$RefreshReg$(_c, \"Accordion\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Accordion","props","_s","expandedIndex","setExpandedIndex","items","renderedItems","map","item","index","isExpanded","handleClick","children","onClick","className","label","fileName","_jsxFileName","lineNumber","columnNumber","content","id","_c","$RefreshReg$"],"sources":["/Users/aishasabrina/Desktop/MobileAppFall24/Week03/comp-lib-start/src/components/Accordion.js"],"sourcesContent":["// writing in React - can change to jsx to indicate it's a component\n// props and state - all it did was apply style in the past\n// content as data coming in as a prop\n// need a click action\n// where does data live and where does state live?\n\nimport {useState} from 'react'\n\nexport default function Accordion(props) {\n    // keep track of expandedIndex in state (values that can change over time) - this component is gonna re-render based on user interaction\n    // const [name, function_to_update/set_state] \n    // set default to 0 - this is the starting state\n    const [expandedIndex, setExpandedIndex] = useState(0)\n\n    // content isn't part of the Accordion bc we want it to be reusable for different info\n    const {items} = props\n\n    const renderedItems = items.map((item, index) => { \n        const isExpanded = index === expandedIndex\n        const handleClick = (index) => {\n            // expandedIndex = index // NEVER DO THIS!! must use setter bcs things re-render - we use a setter because it still references the same one - e.g. expandedIndex = 1, comparing to setExpandedIndex(1) - so nothing changed - react x re-render - so must keep single source of truth - SETEXPANDEDINDEX!! it shouldn't compare itself to itself, else never changes/re-renders\n            setExpandedIndex(index)\n        }\n        return (\n            <div key={item.id}>\n                {/* using tailwind css */}\n                {/* add an onClick to label since that's where we want to click on to open accordion */}\n                {/* setExpandedIndex(index) - REFERENCE TO A FUNCTION - NOT CALLING THE FUNCTION - parantheses only to pass parameter, so () => setExpandedIndex(index) would work instead of handleClick, but we use handleClick so that it's cleaner */}\n                <div onClick={handleClick(index)} className=\"flex justify-between p-3 bg-gray-100 border-b items-center cursor-pointer\">{item.label}</div>\n\n                {/* only show content one at a time - if 1 opens, another closes - set which one to be expanded index */}\n                {/* so we keep track of state HERE in Accordion.js */}\n                {/* If the content index matches the expandedIndex in state, render it. Otherwise, render nothing. */}\n                {/* look at CONDITIONAL RENDERING on notes */}\n                {/* returns the LAST truthy (existing) value - what's rendered is the LAST truthy value, if isExpanded true, then the latter renders */}\n                {/* if isExpanded false, then nothing renders */}\n                { isExpanded && <div>{item.content}</div> }\n            </div>\n        )\n    })\n\n    return <div>{renderedItems}</div>\n}"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,QAAQ,QAAO,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE9B,eAAe,SAASC,SAASA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACrC;EACA;EACA;EACA,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC;;EAErD;EACA,MAAM;IAACQ;EAAK,CAAC,GAAGJ,KAAK;EAErB,MAAMK,aAAa,GAAGD,KAAK,CAACE,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;IAC7C,MAAMC,UAAU,GAAGD,KAAK,KAAKN,aAAa;IAC1C,MAAMQ,WAAW,GAAIF,KAAK,IAAK;MAC3B;MACAL,gBAAgB,CAACK,KAAK,CAAC;IAC3B,CAAC;IACD,oBACIV,OAAA;MAAAa,QAAA,gBAIIb,OAAA;QAAKc,OAAO,EAAEF,WAAW,CAACF,KAAK,CAAE;QAACK,SAAS,EAAC,2EAA2E;QAAAF,QAAA,EAAEJ,IAAI,CAACO;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,EAQxIT,UAAU,iBAAIX,OAAA;QAAAa,QAAA,EAAMJ,IAAI,CAACY;MAAO;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA,GAZnCX,IAAI,CAACa,EAAE;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAaZ,CAAC;EAEd,CAAC,CAAC;EAEF,oBAAOpB,OAAA;IAAAa,QAAA,EAAMN;EAAa;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AACrC;AAACjB,EAAA,CAlCuBF,SAAS;AAAAsB,EAAA,GAATtB,SAAS;AAAA,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}